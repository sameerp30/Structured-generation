import pandas as pd
import requests
from bs4 import BeautifulSoup
from rank_bm25 import *
from rank_bm25 import BM25Okapi
import json
import re
from tqdm import tqdm
import string
from datasets import load_dataset,  concatenate_datasets
import sys

num_negatives = sys.argv[1] if len(sys.argv)>=2 else 10
def remove_punct(test_str):
    punc = '''!()[]{};:'"\,<>./?@#$%^&*~'''
 
# Removing punctuations in string
# Using loop + punctuation string
    for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, " ")
    return test_str

json_file_path_1 = "/raid/nlp/sameer/ColBERT/descritions_80.json"  # path for command to description file
json_file_path_2 = "/raid/nlp/sameer/NL2bash/least_3_Sbert_similar_train.json"  # file generated by SBert_top_3.py file
query_positive = {}
query_negative = {}
query_all = []
positive_passage_all = []
negative_passage_all = []

with open(json_file_path_1, 'r') as j:
    contents = json.loads(j.read())

for x in contents:
    contents[x] = remove_punct(contents[x])
    contents[x] = re.sub(r'\s+', ' ', contents[x])
    contents[x] = contents[x].strip()

with open(json_file_path_2, 'r') as j:
    query_negative_index = json.loads(j.read())

for key in query_negative_index:
    query_negative[key] = [contents[i] for i in query_negative_index[key]]


# tldr = load_dataset("neulab/tldr")
# tldr_train_test = concatenate_datasets([tldr['train'], tldr['test']])
# ds = tldr_train_test.train_test_split(test_size=0.15, seed=4)
# ds["test"] = ds["test"].filter(lambda example: example["cmd_name"] in ds["train"]["cmd_name"])
# print("length of train set is: ", len(ds["train"]))
# print("length of test set: ", len(ds["test"]))

# tldr_train, tldr_val = ds["train"], ds["test"]

# keys_with_desc = contents.keys()
# common_keys = set(keys_with_desc).intersection(set(tldr_train["cmd_name"]))


contents = {i: contents[i] for i in contents.keys() if contents[i]!=""}

descriptions = list(contents.values())

query_negative_filter = {}
for i in tqdm(range(0,len(tldr_train))):         # Loop over all nl queries
    cmd_name = tldr_train["cmd_name"][i]  # reference module name for corresponding nl_query
    if cmd_name not in contents.keys():
        continue
    query_positive[tldr_train["nl"][i]] = contents[cmd_name]  # tldr_train["nl"][i] is natural naguage query
    query_negative_filter[tldr_train["nl"][i]] = query_negative[tldr_train["nl"][i]]


print(len(query_positive))
print(len(query_negative_filter))
for query in tqdm(query_negative_filter):
    for i in range(0,num_negatives):
        query_all.append(query)
        positive_passage_all.append(query_positive[query])
        negative_passage_all.append(query_negative_filter[query][i])

d = {"query": query_all, "positive_passage": positive_passage_all, "negative_passage": negative_passage_all}
df = pd.DataFrame(d)
df.to_csv('train_Sbert_triples_1_pos_3_neg.tsv', sep="\t",index=False)

print(positive_passage_all[0])
print("--------------------------------------------------------------------------------------------")
print(positive_passage_all[1])
print("-------------------------")